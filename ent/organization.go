// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/tmc/pulid"
	"github.com/tmc/srvgql/ent/organization"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges OrganizationEdges `json:"edges"`
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*Account
	// Campaigns holds the value of the campaigns edge.
	Campaigns []*Campaign
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// CampaignsOrErr returns the Campaigns value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) CampaignsOrErr() ([]*Campaign, error) {
	if e.loadedTypes[1] {
		return e.Campaigns, nil
	}
	return nil, &NotLoadedError{edge: "campaigns"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues() []interface{} {
	return []interface{}{
		&pulid.ID{},       // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(values ...interface{}) error {
	if m, n := len(values), len(organization.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*pulid.ID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		o.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		o.Name = value.String
	}
	return nil
}

// QueryAccounts queries the accounts edge of the Organization.
func (o *Organization) QueryAccounts() *AccountQuery {
	return (&OrganizationClient{config: o.config}).QueryAccounts(o)
}

// QueryCampaigns queries the campaigns edge of the Organization.
func (o *Organization) QueryCampaigns() *CampaignQuery {
	return (&OrganizationClient{config: o.config}).QueryCampaigns(o)
}

// Update returns a builder for updating this Organization.
// Note that, you need to call Organization.Unwrap() before calling this method, if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return (&OrganizationClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", name=")
	builder.WriteString(o.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization

func (o Organizations) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
